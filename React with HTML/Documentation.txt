React
	Original DOM
	Virtual DOM
	
Restaurants
	Krutunga
	Paradise
	Bawarchi
	
Befault => 
	data = [
		{ id: 1, label: 'Krutunga' },
		{ id: 2, label: 'Paradise' },
		{ id: 3, label: 'Bawarchi' }
	]

Original DOM
	<div>Krutunga</div>
	<div>Paradise</div>
	<div>Bawarchi</div>
	
Virtual DOM => replica/clone of original DOM
	<div>Krutunga</div>
	<div>Paradise</div>
	<div>Bawarchi</div>

Step 1:
On click of refresh icon
data = [
		{ id: 1, label: 'Krutunga' },
		{ id: 2, label: 'Paradise' },
		{ id: 3, label: 'Bawarchi' },
		{ id: 4, label: 'Ohris' }
	]
data changed => state changed
Virtual DOM is recreated.
Virtual DOM =>
	<div>Krutunga</div>
	<div>Paradise</div>
	<div>Bawarchi</div>
	<div>Ohris</div>
	
Starts comparison with original DOM
	<div>Krutunga</div>				<div>Krutunga</div>
	<div>Paradise</div>				<div>Paradise</div>
	<div>Bawarchi</div>				<div>Bawarchi</div>
						Injected <= <div>Ohris</div>

Step 2: Paradise is deleted
data = [
		{ id: 1, label: 'Krutunga' },
		{ id: 3, label: 'Bawarchi' },
		{ id: 4, label: 'Ohris' }
	]
Virtual DOM is recreated.
Virtual DOM =>
	<div>Krutunga</div>
	<div>Bawarchi</div>
	<div>Ohris</div>
Starts comparison with original DOM
	<div>Krutunga</div>				<div>Krutunga</div>
	<div>Paradise</div>	Deleted  <=
	<div>Bawarchi</div>				<div>Bawarchi</div>
						Injected <= <div>Ohris</div>	

Step 2: Krutunga is updated to Kritunga
data = [
		{ id: 1, label: 'Kritunga' },
		{ id: 3, label: 'Bawarchi' },
		{ id: 4, label: 'Ohris' }
	]
Virtual DOM is recreated.
Virtual DOM =>
	<div>Kritunga</div>
	<div>Bawarchi</div>
	<div>Ohris</div>
Starts comparison with original DOM
	<div>Krutunga</div>	Updated  <=	<div>Kritunga</div>
	<div>Paradise</div>	Deleted  <=
	<div>Bawarchi</div>				<div>Bawarchi</div>
						Injected <= <div>Ohris</div>
						
In comparison,
	if it finds new node in virtual DOM => injected to Original DOM
	if it finds any missing node in virtual DOM => removed in Original DOM
	if it finds any updated node in virtual DOM => updates node in Original DOM

Libraries to Import
	React - React.createElement(type, attributes, innerhtml)
	ReactDOM - ReactDOM.render(what to render, where to render);
	
// button
ReactDOM.render(React.createElement('button'), document.getElementById('root'))

ReactDOM.render(React.createElement('div'), document.getElementById('app'))
React.createElement('div', { id: 'div1', items: [ {}, {}]}, 'Welcome to Demo');

React.createElement(type of element, attributes, innerhtml)
	
div having label and button with title Welcome

React.createElement('div', 
	{ id: 'div1', items: 
		[ 
			React.createElement('label'...), 
			React.createElement('textbox', ....)
		]
	}, 
	'Welcome');
	
<div>
	<input type='label' value='UserName' />
	<input type='text'/>
</div>

Process
	<input type='label' value='UserName' />
	will be converted to 
	React.createElement('label', { }, 'UserName');
	will generate html element
	
JSX vs HTML
HTML Elements => directly rendered
JSX Elements => converted to React.createElement and then html elements are created in javascript dynamically


TestComponent({ title: 'Welcome to React Demo'})
<TestComponent title='Welcome to React Demo' />

Important Points
	Use curly braces for variables with in jsx elements.
	
React Components
	Stateless => functions
	StateFull => Es6 class => Create ES6 class, extend with React.Component and implement the render function
	

class Component {
	constructor(props) {
		this.props = props;
	}
	test() {
	}
}
class Login extends Component {
	getLogin() {
		return this.props.userName;
	}
}

class Welcome extends Component {
	getWelcomeText(){
		return this.props.text;
	}
}


Person name age city

Class Person {
	constructor(props){
		this.name = props.name || '';
		this.age = props.age || '';
		this.city = props.city || '';
	}
	welcome() {
		return this.name + this.age + this.city;
	}
}

class Component {
	constructor(props){
		this.props = props;
	}
}

class Person extends Component {
	welcome() {
		return this.props.name + this.props.age + this.props.city;
	}
}

class Student extends Component {
	welcome() {
		return this.props.fullName;
	}
}

class Test {
	test1() {
		var x = 0;
		this.y = 0;
	}
	test2() {
		// x cant be accessed
		this.y can be accessed
	}
}

x is block level variable
y is public variable


Variables
block level => var x = 1; accessed with in the block/function
public => this.x accessed in all functions
Props => this.props.x(stateful), props.x(stateless) => attributes that component receives 
		try to not to update props
consts => const x = 1;
State => this.state.x => changes in these variables will update the UI.

// How to create state level variables ie initialization

class Test extends React.Component {
	constructor(props){
		super(props);
		this.state = {
			x: 1,
			y: 2,
			z: 3
		}
	}
}

// updating values => use helper method setState
this.setState({ x: 4 })

here x values changes from 1 to 4, as it value is changed screen updates automatically

this.setState({ x: 1 })
x value is not updated, so there are no updates in screen



class RestaurantScreen extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			restaurants: []
		}
	}
	
	// will make a backend call
	this.setState({ restaurants: response });
}

Events
onLoad="function()"

<input type='button' value='Load' onClick="" />

class Test extends React.Component {
	buttonClick(){
	
	}
	render() {
		return (
			<input type='button' value='Load' onClick={this.buttonClick}/>
		);
	}
}

<input type='button' value='Load' onClick={this.buttonClick}/> here this will be null inside buttonClick method. so If scope needs to pass then we need to use .bind(this)
<input type='button' value='Load' onClick={this.buttonClick.bind(this)}/>

document.getElementById('txt1').value
document.getElementById('chk1').checked

buttonClick(event) {

}

event => React Synthetic event
to get control => event.target
to get value => event.target.value


Converting HTML to React
1. Copy html body to render function.
2. Add one div at the top if there are multiple nodes.
3. Add Closing Tags if it is missing
4. Copy styles to head section






