Boiler Plate => Common Code
Boiler Plate Command => Command to generate Project

Installing Boiler Plate
	npm install -g create-react-app 
Generating Project	
	create-react-app projectname

Project
	package.json
	node_modules
	
Node Modules
	npm install moduleName --save
	
Installing the modules
1. npm install moduleName --save
2. add module name to package.json and run npm install

npm install a --save
	
	a
		b  	c
	     e f
		 
	e f b c a
	
ES5 standard
module.exports = Calculator
var Calc1 = require('./Calculator');

Es6 standard
export Calculator
import Calc1 from './Calculator';
	
Manual/Old Approach
cd profiler
npm init
npm install react react-dom react-scripts --save
create html file
create js file


Routing =>
	npm install react-router-dom --save

Basic Routing => loading all components that are configured for particular route
default Routing => loads for all routes
SubRoutes => SubRoute of one parent route. If parent route component needs to skip then use exact keyword for parent
Switch => Loads only one component

1. In order to support routing for project, we need to add BrowserRouter as parent.


Project Structure
public
src
	containers/views
	components - reusable components
	images
	data - fixed static information - states, countries
	constants - settings

Creating a project
	Create Component and map to Router
	Add UI view to render method of component
	Close all tags
	Add Images
	
	
Router
	BrowserRouter
	HashRouter
	
CallBack Function => it is a function where function as passed as input parameter

const add = (x,y) => x + y

function add(x, y) {
	return x + y;
}

function add(x, y, callback) {
	var z = x + y;
	callback(z);
}
add(2, 4, function(){
	console.log('Demo');
});

add(2, 4, function(value){
	console.log('Result is ' + value);
});

http.createServer(function(req, res) {}).listen(3000);

Javascript usaually runs in Synchronous mode. Sometimes it finds Asynchrous code and Javascript will not wait till it finishes. In order to handle Asynchrous process, Javascript uses concepts like Promises.

Promise => It is a way to handle asynchronous operations. It has 2 outputs. Sucess and Failure

collectMoney({
	amount: 10000,
	user: 'Prakash'
}).then(callback)
.catch(callback)

collectMoney({
	amount: 10000,
	user: 'Prakash'
}).then(function(response) { alert(response) })
.catch(function(error){ alert(error)})

collectMoneyAndDeposit({
	amount: 10000,
	user: 'Prakash'
}).then(callback1).then(callback3).catch(callback2)

orderBiriyani({
	type: 'ChickenBiriyani'
}).then(response => {
	alert(response); // it will print something like Biriyani is ready
	return collectOrder();
}).then(response => {
	alert(response); => will print something like Order is Collected
	return startDelivery();
}).then(response => {
	alert(response); => will print something like item is delivered 
}).catch(error => {
	alert(error); => will print something like unable to serve order
})

URL Requests
	Get => 
		Retriveing Data 
		its like a url requesting
	Post => 
		Inserting, Updating, Deleting.. sometimes we use it for Retriveing also
		Submiting form
		
LifeCycle
	Constructor => Initialization or loading default values
	ComponentWillMount => Triggers before component is rendered. Registering/Subscribing Bluetooth, Channels, adding events.
	Render => Rendering the View
	ComponentDidMount => Triggers everytime when page is loaded
	ComponentWillUnMount => Triggers when component is unloaded. UnSubscriging, Degistering....
	



class Restaurant extends React.Component {
	constructor(props){
		super(props);
		this.state = {
			restaurants: [],
			errorMessage: ''
		}
	}
	
	componentDidMount(){
		getDataFromServer().then( response => {
			this.setState({ restaurants: response.data});
		}).catch( error => {
			this.setState({ errorMessage: error.message});
		})
	}
	
	render() {
		return (
			<div>{this.state.restaurants}</div>
		);
	}
}

history.push('home')

history.push('/home', { some: 'state' })

history.push({
  pathname: '/home',
  search: '?the=query',
  state: { some: 'state' }
})

this.props.history.push('home')

var courses = [ 'React', 'React Native']

var liElements = [];
for(var course of courses){
	liElements.push(<li>{course}</li>)
}

courses.map(course => <li>{course}</li>)

courses.map = function(callback){
	var newArray = [];
	for(var item of this){
		newArray.push(callback(item));
	}
	return newArray;
}

Node: Points to remember
1. It installs modules inside node_modules folder.
2. It installs submodules required for that module.
3. In each module, there should be package.json.
4. We will never checkin node_modules folder. So when we download a project from source control, we must run command npm install to install all dependencies.
5. Module can be added using npm install moduleName or add module manually to dependencies object of package.json and run npm install command.
6. save is attribute to be used to insert module into dependencies section of package.json
	npm install react --save
7. save-dev is attribute to be used to insert module into devDependencies section of package.json. These modules I need in development stage only.
	npm install jest --save-dev
	
npm install react-router-dom --save
yarn add react-router-dom

Adding Images
1. add images to public folder and use as html standard
	adv: 
		same syntax as html
		ability to configure in backend and get images dynamically by using json
	dis: all files will be copied to bundle
2. add images inside images folder of src folder and import images in the beginining of the file
	adv:
		copies only used images(ie imported images)
	dis:
		fixed set of data and cant load dynamically
		syntax changes
		we must import in the beginining of the file
		
Choosing Modules from internet
	1. check the last commit and pick the recent ones
	2. Try to pick same react version or -1
	3. if older version is needed, select tag and pick the version
	
npm install react-gmaps --save => 1.9 version
npm install react-gmaps@1.6.0 => 1.6.0 version

Navigation Params
	Params
	Query/Search string
	
1.Params
// passing params => 
Adv:
	for security purposes, we can use this as params are not shown in query string
Dis:
	Refresh will not work
	
history.push({
	pathname: 'home',
	params: { username: 'Karthik', age: 20 }
});

var params = this.props.location.params;
console.log(params.username + ', with age ' + params.age);

2. Query/Search string
// passing as search params => ie in query string
Adv:
	supports refresh feature

https://github.com/mkrishna2025/Routing
history.push({
	pathname: 'home',
	search: 'username=Karthik&age=20',
});
const queryParams = new URLSearchParams(this.props.location.search);
console.log(queryParams.get('username') + ', with age ' + queryParams.get('age'));

<a href='google.com?username=karthik'>Google</a>



<Link to={{
          pathname: '/google.com',
          search: 'username=karthik',
          params: { secretAccessKey: '123456' }
        }}> Google </Link>
		
https://reactjs.org/docs/reconciliation.html

https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html

https://www.getpostman.com/
https://desktop.github.com/
https://auth0.com/

	